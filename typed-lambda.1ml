module typed_lambda

use "types/std/list"
use "types/std/option"
use "types/equality"

open list;
open option;
open equality;

open struct
  list = List.t;
  option = Option.t;
end;

type Type = sig
  type t a;

  Int : t (type int);
  Arrow a b : t a -> t b -> t (type (a ~> b));
end;

type TQ a = wrap (T : Type) -> T.t a;

fill a (T : Type) (tq : TQ a) : T.t a = (unwrap tq : TQ a) T;

TQType : Type = struct
  type t a = TQ a;

  Int = wrap (fun (T : Type) => T.Int) : t (type int);
  Arrow a b (ty1 : t a) (ty2 : t b) =
    let ty1 = unwrap ty1 : t a in
    let ty2 = unwrap ty2 : t b in
      wrap (fun (T : Type) => T.Arrow a b (ty1 T) (ty2 T)) : t (type (a ~> b));
end;

type ExType = wrap sig
  type a;
  tq : TQ a;
end;

ex_type a (tq : TQ a) = wrap struct
  type a = a;
  tq = tq;
end : ExType;

AsInt : Type = struct
  type t a = Option.t (Equality.t a (type int));

  none a = Option.none (Equality.t a (type int));
  some a = Option.some (Equality.t a (type int));

  Int = some (type int) (Equality.refl (type int));

  Arrow a b (ty1 : t a) (ty2 : t b) = none (type (a ~> b));
end;

type ArrowEq a = wrap sig
  type dom;
  type cod;

  d : TQ dom;
  c : TQ cod;

  eq : Equality.t a (type dom ~> cod);
end;

AsArrow : Type = struct
  type t a = sig
    ty : TQ a;
    eq : Option.t (ArrowEq a);
  end;

  none a = Option.none (ArrowEq a);
  some a = Option.some (ArrowEq a);

  Int = struct
    ty = wrap (fun (T : Type) => T.Int) : TQ (type int);
    eq = none (type int);
  end;

  Arrow a b (ty1 : t a) (ty2 : t b) = struct
    ty = TQType.Arrow a b (ty1.ty) (ty2.ty);

    M = struct
      type dom = a;
      type cod = b;

      d = ty1.ty;
      c = ty2.ty;

      eq = Equality.refl (type (a ~> b));
    end;

    eq = some (type (a ~> b)) (wrap M : ArrowEq (type (a ~> b)));
  end;
end;

Cast : Type = struct
  type t a = wrap (b : type) -> TQ b ~> option (Equality.t a b);

  Int =
    let f b (tq : TQ b) =
      Option.map (Equality.t b (type int)) (Equality.t (type int) b)
        (Equality.symm b (type int))
        (fill b AsInt tq)
    in
      wrap f : t (type int);

  Arrow a b (ty1 : t a) (ty2 : t b) =
    let f c (tq : TQ c) : option (Equality.t (type (a ~> b)) c) =
      let as_arrow = fill c AsArrow tq in
      let eq_t = Equality.t (type (a ~> b)) c in
        Option.bind (ArrowEq c) eq_t (as_arrow.eq) (fun (x : ArrowEq c) =>
          let x = unwrap x : ArrowEq c in
          let right = Equality.symm c (type ((x.dom) ~> (x.cod))) (x.eq) in
          Option.bind (Equality.t a (x.dom)) eq_t ((unwrap ty1 : t a) (x.dom) (x.d)) (fun (eq1 : Equality.t a (x.dom)) =>
          Option.bind (Equality.t b (x.cod)) eq_t ((unwrap ty2 : t b) (x.cod) (x.c)) (fun (eq2 : Equality.t b (x.cod)) =>
            let left = Equality.arrow a (x.dom) b (x.cod) eq1 eq2 in
            let res = Equality.trans (type (a ~> b)) (type ((x.dom) ~> (x.cod))) c left right in
              Option.some eq_t res)))
    in
      wrap f : t (type (a ~> b));
end;

type Term = sig
  type t;
  type ty;

  Int : int -> t;
  Abs : ty -> t -> t;
  App : t -> t -> t;
end;

TypeCheck : Term = struct
  type Env = list ExType;
  type t = Env ~> option ExType;
  type ty = ExType;

  insert = List.cons ExType;

  Int (n : int) (env : Env) = Option.some ExType (ex_type (type int) (TQType.Int));

  Abs (ty1_ : ty) (x : t) (env : Env) =
    let ty1 = unwrap ty1_ : ty in
    let a = ty1.a in
    let env = insert ty1_ env in
    Option.bind ExType ExType (x env) (fun (ty2 : ExType) =>
      let ty2 = unwrap ty2 : ExType in
      let b = ty2.a in
      let ex = ex_type (type (a ~> b)) (TQType.Arrow a b (ty1.tq) (ty2.tq)) in
        Option.some ExType ex);

  App (x : t) (y : t) (env : Env) =
    Option.bind ExType ExType (x env) (fun (ty1 : ExType) =>
    Option.bind ExType ExType (x env) (fun (ty2 : ExType) =>
      let ty1 = unwrap ty1 : ExType in
      let ty2 = unwrap ty2 : ExType in
      let a = ty1.a in
      let b = ty2.a in
      let tq1 = ty1.tq in
      let tq2 = ty2.tq in
      let as_arrow = fill a AsArrow tq1 in
      Option.bind (ArrowEq a) ExType (as_arrow.eq) (fun (arrow_eq : ArrowEq a) =>
        let arrow_eq = unwrap arrow_eq : ArrowEq a in
        let cast = unwrap fill (arrow_eq.dom) Cast (arrow_eq.d) : Cast.t (arrow_eq.dom) in
        let opt_eq = cast b tq2 in
        Option.bind (Equality.t (arrow_eq.dom) b) ExType opt_eq (fun (eq : Equality.t (arrow_eq.dom) b) =>
          Option.some ExType (ex_type (arrow_eq.cod) (arrow_eq.c))))));
end;
