module typed_lambda

use "types/std/option"
use "types/equality"

include option;
include equality;

type Type = sig
  type t a;

  Int : t (type int);
  Arrow a b : t a -> t b -> t (type (a ~> b));
end;

type TQ a = (T : Type) -> T.t a;

AsInt : Type = struct
  type t a = Option.t (Equality.t a (type int));

  none a = Option.none (Equality.t a (type int));
  some a = Option.some (Equality.t a (type int));

  Int = some (type int) (Equality.refl (type int));

  Arrow a b (ty1 : t a) (ty2 : t b) = none (type (a ~> b));
end;

type Term = sig
  type t;
  type ty;

  Int : int -> t;
  Abs : ty -> t -> t;
  App : t -> t -> t;
end;
